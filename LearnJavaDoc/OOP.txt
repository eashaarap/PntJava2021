OOP: Object Oriented Programming

Class
Object
Association
Aggregation
Composition

Abstractions
Encapsulation
Polymorphism
Inheritance


ABSTRACTION: implementation hiding
    interface: prototype;guideline for future for your reference so that dev team can follow to develop a complete
    product; use when role needs to defined in other classes, regardless of inheritance tree of these classes
        -can't instantiate variable and create object
        - cant contain concrete methods
        -only can use 'Public' modifier
    abstract class: template needs to be defined for a group of subclasses;

ENCAPSULATION: data hiding
    -mechanism of wrapping the data(variables) and code acting on the data (methods) together in a single unit
    - variables of class will be hidden from other classes, and can be accessed only through the methods of the current
    class
    TO ACHIEVE ENCAPSULATION IN JAVA:
        - declare variables of class as private
        - provide public setter and getter methods to modify and view the variables value

INHERITANCE:
    Grandfather = Super(parent) class
    Father is a sub(child)class of Grandfather
    Son is a sub(child) class of father

    Son --> Father --> Grandfather
        Single: class B inherits from Class A
        Multilevel: class C inherits from Class B, and Class B inherits from Class A
        Hierarchical

    You can add more sub classes that extends from Grandfather class and have a "hierarchical inheritance"

    ex: Father, FatherTwo, FatherThree can all extend from Grandfather

POLYMORPHISM:
    - Java concept by which we can perform a single action in different ways
    -"poly" means many and "morphs" means forms
        - so polymorphism means over forms
    - occurs when we have man classes that are related to each other by inheritance

    Two types:
    1. compile-time polymorphism: method overloading: static binding
    2. runtime polymorphism: method overriding: dynamic binding

        Method Overloading: during compile time
            - Overloading allows different method to have same name,
            but different signatures where signature can differ

        Method Overriding:
            -feature that allows a subclass or child class to provide a specific implementation of a method that is
            already provided by one of its super-classes or parent classes
            -When a method in a subclass has the same name, same parameters or signature,
            and same return type(sub type) as a method in its super-class,
            then the method in the subclass is said to override the method in the super
            class
            -Method overriding is one of the way by which java achieve Run Time poloymorphism
            -The version of a method that is executed will be determined by the object that is used to invoke it.
            IF an object of a parent class is used to invoke the method,
            then the version in the parent class will be executed,
            but if an object of the subclass is used to invoke the method, then the version in the child
            class
             will be executed
             -In other words, it is the type of the object being referred to(not the type of the reference variable)
             that determines which version of an overridden method will be executed


